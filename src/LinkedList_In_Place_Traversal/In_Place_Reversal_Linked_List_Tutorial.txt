In Place Reversal Of Linked List:

In-place reversal of a linked list is a pattern used in various algorithm problems that require reversing parts or the
entirety of a linked list without using extra space for another list or array. Instead, the reversal is done by
rearranging the pointers of the nodes within the list. Here are the key steps and ideas involved in this pattern:

Steps for In-place Reversal

Initialization:
- Set up three pointers: previous (initially set to null), current (initially set to the head of the list), and next
(used for temporarily storing the next node).

Traversal and Reversal:
- Traverse the list using the current pointer.
- At each node, store the next node using the next pointer.
- Reverse the current node's pointer to point to the previous node.
- Move the previous and current pointers one step forward (i.e., previous becomes the current node, and current becomes
the next node stored earlier).

Completion:
- Continue the traversal until you reach the end of the list (i.e., current becomes null).
- The previous pointer will now point to the new head of the reversed list.

Example Code: Reversing an Entire Linked List

class ListNode {
    int value;
    ListNode next;

    ListNode(int value) {
        this.value = value;
        this.next = null;
    }
}

public class LinkedListReversal {

    public static ListNode reverseLinkedList(ListNode head) {
        ListNode previous = null;
        ListNode current = head;
        ListNode next = null;

        while (current != null) {
            next = current.next; // temporarily store the next node
            current.next = previous; // reverse the current node's pointer
            previous = current; // move the previous pointer one step forward
            current = next; // move to the next node in the list
        }

        return previous; // new head of the reversed list
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.value + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        // Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.print("Original list: ");
        printList(head);

        // Reversing the linked list
        ListNode reversedHead = reverseLinkedList(head);

        System.out.print("Reversed list: ");
        printList(reversedHead);
    }
}

Original list: 1 -> 2 -> 3 -> 4 -> 5 -> null
Reversed list: 5 -> 4 -> 3 -> 2 -> 1 -> null


Applications

In-place reversal of a linked list pattern is useful in many scenarios, including:

- Reverse a Sublist: Reverse a specific portion of the list.
- K-group Reversal: Reverse nodes in groups of k.
- Palindrome Check: Reverse and compare parts of the list to check for a palindrome.

Variations

- Reverse a Sublist:
      Identify the sublist by its start and end positions.
      Reverse only the nodes within this sublist.

- Reverse Nodes in k-Group:
      Reverse the nodes in groups of size k.
      If the number of nodes is not a multiple of k, the last group can be left as is or also reversed.


