Knapsack Problem (Dynamic Programming)
======================================

- Knapsack Problem

    The Knapsack problem is a classic optimization problem in computer science and combinatorial optimization.
    It involves selecting a subset of items to maximize the total value without exceeding a given capacity constraint.
    There are several variations of the problem, but the most common ones are the 0/1 Knapsack problem, the Fractional
    Knapsack problem, and the Unbounded Knapsack problem.

- Types of Knapsack Problems

    1. 0/1 Knapsack Problem:
       - Each item can either be included or excluded from the knapsack (no partial items are allowed).
       - Objective: Maximize the total value of items in the knapsack without exceeding its capacity.

    2. Fractional Knapsack Problem:
       - Items can be divided into smaller parts, allowing for fractional inclusion.
       - Objective: Maximize the total value of items in the knapsack without exceeding its capacity.

    3. Unbounded Knapsack Problem:
       - There is an unlimited supply of each item.
       - Objective: Maximize the total value of items in the knapsack without exceeding its capacity.

- 0/1 Knapsack Problem

    1. Problem Statement

    Given:
    - A set of  n items, where each item i has a weight w_i and a value v_i.
    - A knapsack with a maximum capacity W.

    The goal is to determine the maximum total value of items that can be included in the knapsack without exceeding its capacity.
    Each item can either be included (1) or excluded (0) from the knapsack.

    2. Mathematical Formulation

        Maximize:
        V = sum_{i=1}^{n} v_i x_i

        Subject to:
        sum_{i=1}^{n} w_i x_i leq W
        x_i in {0, 1} for all i

        Where:
        - x_i is a binary variable indicating whether item i is included in the knapsack (x_i = 1) or not (x_i = 0).

- Solution Approaches

    1. Brute Force:
       - Evaluate all possible combinations of items to find the optimal solution.
       - Time complexity: O(2^n), which is impractical for large n.

    2. Dynamic Programming:
       - Use a table to store the maximum value that can be achieved for each subproblem.
       - Time complexity: O(nW).

    3. Greedy Algorithms:
       - Suitable for the fractional knapsack problem, but not for the 0/1 knapsack problem.

    4. Branch and Bound:
       - A tree-based approach that explores promising branches and prunes branches that do not meet certain criteria.

- Example

    Suppose you have the following items and a knapsack with a capacity of 50:

    | Item | Weight | Value |
    |------|--------|-------|
    | 1    | 10     | 60    |
    | 2    | 20     | 100   |
    | 3    | 30     | 120   |

    Using dynamic programming, you can create a table to determine the maximum value that can be achieved without
    exceeding the knapsack's capacity.

- Applications

    The knapsack problem has numerous real-world applications, including:
    - Resource allocation.
    - Budget management.
    - Cargo loading.
    - Investment decisions.
    - Many other decision-making problems in finance, logistics, and other fields.

- Dynamic Programming Approach for 0/1 Knapsack Problems

    *** Pseudocode

    function knapsack(values, weights, W):
        n = length(values)
        // Step 1: Create and initialize the dp array
        dp = array of size (n + 1) x (W + 1) initialized to 0

        // Step 2: Populate the dp array
        for i from 1 to n:
            for w from 1 to W:
                if weights[i - 1] <= w:
                    // If the current item's weight is less than or equal to the current capacity,
                    // decide whether to include it or not
                    includeItem = dp[i - 1][w - weights[i - 1]] + values[i - 1]
                    excludeItem = dp[i - 1][w]
                    dp[i][w] = max(includeItem, excludeItem)
                else:
                    // If the current item's weight is greater than the current capacity,
                    // we cannot include the item
                    dp[i][w] = dp[i - 1][w]

        // Step 3: Return the maximum value that can be achieved
        return dp[n][W]

        *** Explanation

            Initialization:
                n = length(values): Determine the number of items.
                dp = array of size (n + 1) x (W + 1) initialized to 0: Create a 2D array dp to store the maximum value that can be achieved for each subproblem, initialized to 0.

            Building the DP Table:
                Iterate through each item i from 1 to n.
                For each item, iterate through each capacity w from 1 to W.
                    If the weight of the current item weights[i - 1] is less than or equal to the current capacity w:
                        Include the current item: Calculate the value as dp[i - 1][w - weights[i - 1]] + values[i - 1].
                        Exclude the current item: The value remains as dp[i - 1][w].
                        Take the maximum of including and excluding the current item to fill dp[i][w].
                    If the weight of the current item is greater than the current capacity, the current item cannot be included, so the value remains as dp[i - 1][w].

            Result Extraction:
                The maximum value that can be achieved with all items and the full capacity W is found in dp[n][W].

        This pseudocode outlines the dynamic programming approach for solving the 0/1 knapsack problem, where `values` is an array
        of item values, `weights` is an array of item weights, and `W` is the maximum capacity of the knapsack. The result is the
        maximum value that can be achieved without exceeding the knapsack's capacity.


- 0/1 Knapsack Example: LeetCode Problem 1235. Maximum Profit in Job Scheduling (Runtime 25ms Beats 97.12% Java Users on LeetCode)

    To solve this problem, we can use a dynamic programming approach along with binary search for efficiency.
    The idea is to sort the jobs by their end times and use dynamic programming to find the maximum profit at each step.
    Binary search helps to quickly find the latest job that doesn't overlap with the current job. (ChatGPT coded the solution ðŸ¤–)

    Here's how we can implement this in Java:

        1. Sort the jobs by end time.
        2. Use dynamic programming to find the maximum profit.
        3. Use binary search to find the latest non-overlapping job.

    *** Steps

    1. Create a Job Class:
       - Define a `Job` class to store the start time, end time, and profit of each job.

    2. Sort Jobs:
       - Sort the jobs based on their end times.

    3. Dynamic Programming:
       - Use a `dp` array where `dp[i]` represents the maximum profit that can be obtained by considering jobs from `0` to `i`.

    4. Binary Search:
       - For each job, use binary search to find the latest job that doesn't overlap with the current job.

    *** Implementation

    Here is the Java code:

    import java.util.Arrays;

    public class JobScheduling {

        static class Job {
            int start, end, profit;
            Job(int start, int end, int profit) {
                this.start = start;
                this.end = end;
                this.profit = profit;
            }
        }

        public static int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
            int n = startTime.length;
            Job[] jobs = new Job[n];

            // Step 1: Create Job objects
            for (int i = 0; i < n; i++) {
                jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
            }

            // Step 2: Sort jobs by end times
            Arrays.sort(jobs, (a, b) -> a.end - b.end);

            // Step 3: Initialize dp array
            int[] dp = new int[n];
            dp[0] = jobs[0].profit;

            for (int i = 1; i < n; i++) {
                int includeProfit = jobs[i].profit;
                int l = binarySearch(jobs, i);
                if (l != -1) {
                    includeProfit += dp[l];
                }
                dp[i] = Math.max(includeProfit, dp[i - 1]);
            }

            return dp[n - 1];
        }

        // Binary search to find the latest job that doesn't overlap with job[i]
        private static int binarySearch(Job[] jobs, int index) {
            int low = 0, high = index - 1;
            while (low <= high) {
                int mid = low + (high - low) / 2;
                if (jobs[mid].end <= jobs[index].start) {
                    if (jobs[mid + 1].end <= jobs[index].start) {
                        low = mid + 1;
                    } else {
                        return mid;
                    }
                } else {
                    high = mid - 1;
                }
            }
            return -1;
        }

        public static void main(String[] args) {
            int[] startTime = {1, 2, 3, 4, 6};
            int[] endTime = {3, 5, 10, 6, 9};
            int[] profit = {20, 20, 100, 70, 60};
            System.out.println(jobScheduling(startTime, endTime, profit)); // Output: 150
        }
    }

    *** Explanation

    1. Job Class:
       - The `Job` class holds the start time, end time, and profit of each job.

    2. Sort Jobs:
       - Jobs are sorted based on their end times to simplify the process of finding the maximum profit.

    3. Dynamic Programming Array (dp):
       - `dp[i]` holds the maximum profit that can be obtained by considering jobs from `0` to `i`.
       - For each job `i`, calculate the profit including the current job (`includeProfit`) and find the last non-overlapping
       job using binary search.
       - Update `dp[i]` with the maximum of `includeProfit` and the profit excluding the current job (`dp[i - 1]`).

    4. Binary Search:
       - A helper function to find the latest job that ends before the current job starts. This function helps to ensure no
       overlapping jobs are selected.

    5. Main Method:
       - Example usage with given start times, end times, and profits.

    This solution efficiently computes the maximum profit without overlapping jobs using dynamic programming and binary search.

