Tree: Breadth-First Search (BFS)
================================

- Introduction:

Breadth-First Search (BFS) is a fundamental algorithm used for traversing or searching tree or graph data structures.
It starts at the root (or any arbitrary node in the case of a graph) and explores all the neighboring nodes at the
present depth before moving on to nodes at the next depth level. This process continues until all nodes are visited
or a specific condition is met (e.g., finding a particular node).

Here is a step-by-step explanation of the BFS algorithm:

1. Initialization:
   - Begin by placing the root node (or the starting node) in a queue.
   - Mark this node as visited.

2. Traversal:
   - While the queue is not empty:
     - Remove the front node from the queue.
     - Process this node (e.g., visit or print the node's value).
     - Add all unvisited neighboring nodes (or children, in the case of a tree) of the current node to the queue and mark them as visited.

3. Termination:
   - The algorithm terminates when the queue becomes empty, meaning all reachable nodes have been visited.

Example in a Tree

Let's consider a simple tree:

        A
       / \
      B   C
     / \   \
    D   E   F

BFS Traversal:
1. Start at the root node `A` and add it to the queue: `Queue = [A]`
2. Dequeue `A` and visit it, then enqueue its children `B` and `C`: `Queue = [B, C]`
3. Dequeue `B` and visit it, then enqueue its children `D` and `E`: `Queue = [C, D, E]`
4. Dequeue `C` and visit it, then enqueue its child `F`: `Queue = [D, E, F]`
5. Dequeue `D` and visit it: `Queue = [E, F]`
6. Dequeue `E` and visit it: `Queue = [F]`
7. Dequeue `F` and visit it: `Queue = []`

The BFS traversal order for this tree is: `A -> B -> C -> D -> E -> F`.

BFS Algorithm in Pseudocode

Here is the BFS algorithm in pseudocode for a tree:

BFS(root):
    queue = empty queue
    queue.enqueue(root)
    visited = set()
    visited.add(root)

    while not queue.isEmpty():
        node = queue.dequeue()
        visit(node)

        for each child in node.children:
            if child not in visited:
                queue.enqueue(child)
                visited.add(child)

Characteristics of BFS

- Complete: BFS will find a solution if one exists.
- Optimal: BFS will find the shortest path in an unweighted graph or tree.
- Time Complexity: O(V + E) where V is the number of vertices (nodes) and E is the number of edges.
- Space Complexity: O(V) because of the queue and the visited set.

Applications of BFS

- Finding the shortest path in an unweighted graph.
- Level-order traversal of a tree.
- Networking (broadcasting and peer-to-peer networks).
- Finding connected components in a graph.
- Solving puzzles (like finding the shortest path to a goal state in a puzzle).

Tree level-order traversal is a variant of the Breadth-First Search (BFS) algorithm.

Tree level-order traversal, also known as Breadth-First Search (BFS) traversal, is a method of visiting all the nodes
in a tree level by level, starting from the root and proceeding to the next level down, visiting nodes from left to right at each level.

How Level Order Traversal Works

1. Initialization:
   - Start by placing the root node of the tree in a queue.

2. Traversal:
   - While the queue is not empty:
     - Dequeue the front node from the queue.
     - Process the node (e.g., print its value).
     - Enqueue all the children (or left and right child for binary trees) of the dequeued node.

3. Termination:
   - The traversal is complete when the queue is empty, meaning all nodes have been visited.

Example

Consider the following binary tree:

        A
       / \
      B   C
     / \   \
    D   E   F

Level Order Traversal steps:
1. Start at the root node `A` and add it to the queue: `Queue = [A]`
2. Dequeue `A` and visit it, then enqueue its children `B` and `C`: `Queue = [B, C]`
3. Dequeue `B` and visit it, then enqueue its children `D` and `E`: `Queue = [C, D, E]`
4. Dequeue `C` and visit it, then enqueue its child `F`: `Queue = [D, E, F]`
5. Dequeue `D` and visit it: `Queue = [E, F]`
6. Dequeue `E` and visit it: `Queue = [F]`
7. Dequeue `F` and visit it: `Queue = []`

Level Order Traversal Order: `A -> B -> C -> D -> E -> F`

Pseudocode

Here is the pseudocode for level-order traversal:

LevelOrderTraversal(root):
    if root is None:
        return

    queue = empty queue
    queue.enqueue(root)

    while not queue.isEmpty():
        node = queue.dequeue()
        visit(node)  // Process the node, e.g., print its value

        if node.left is not None:
            queue.enqueue(node.left)

        if node.right is not None:
            queue.enqueue(node.right)

Characteristics

- Complete: Level-order traversal will visit all nodes in the tree.
- Optimal: Not applicable for optimization but ensures all nodes are visited in level order.
- Time Complexity: O(N) where N is the number of nodes in the tree, since each node is enqueued and dequeued exactly once.
- Space Complexity: O(N) in the worst case, where the last level of the tree might have up to N/2 nodes.

Applications

- Shortest Path in Unweighted Graphs: BFS can be used to find the shortest path in an unweighted graph.
- Level-Order Display: Useful for printing the tree level by level.
- Serialization/Deserialization of Trees: Often used in algorithms that serialize and deserialize trees.
- Breadth of Trees: Can be used to calculate the breadth (width) of the tree at different levels.

In summary, level-order traversal (BFS) is an important method for tree traversal that processes nodes level by level,
ensuring that all nodes at a given level are visited before moving on to the next level.