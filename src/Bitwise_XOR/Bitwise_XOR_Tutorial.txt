Bitwise XOR
===========

Bitwise XOR (exclusive OR) is a binary operation that operates on the individual bits of its operands. It is a fundamental
operation in digital logic and computer science, commonly used in tasks like encryption, error detection, and data manipulation.

- How Bitwise XOR Works

Bitwise XOR compares corresponding bits of two numbers and returns a new number where each bit is set to 1 if the corresponding
bits of the operands are different, and 0 if they are the same.

Here's a bit-by-bit comparison for clarification:

- 0 XOR 0 = 0
- 0 XOR 1 = 1
- 1 XOR 0 = 1
- 1 XOR 1 = 0

- Example Calculation

Consider the bitwise XOR of the binary numbers `1010` and `1100`:

    1010
XOR 1100
---------
    0110

- The first bit: 1 XOR 1 = 0
- The second bit: 0 XOR 1 = 1
- The third bit: 1 XOR 0 = 1
- The fourth bit: 0 XOR 0 = 0

The result is `0110`.

- Properties of Bitwise XOR

1. Commutative: `A XOR B = B XOR A`
2. Associative: `(A XOR B) XOR C = A XOR (B XOR C)`
3. Identity: `A XOR 0 = A`
4. Self-inverse: `A XOR A = 0`

- Applications

1. Swapping Values: XOR can be used to swap two values without using a temporary variable:

    a = a XOR b
    b = a XOR b
    a = a XOR b

2. Encryption and Decryption: In some simple encryption algorithms, a key is XORed with the plaintext to produce ciphertext.
3. Checksum and Error Detection: XOR is used in generating parity bits for error detection in data transmission.

Bitwise XOR is a versatile and efficient operation widely used in low-level programming and computer science for its
unique properties and simplicity.

In Java, the bitwise XOR operator is represented by the caret symbol (`^`). It operates on the individual bits of its operands
and returns a new integer whose bits are set according to the XOR logic.

- Syntax

result = operand1 ^ operand2;

- Example Usage

Here's an example demonstrating the use of the bitwise XOR operator in Java:

public class BitwiseXORExample {
    public static void main(String[] args) {
        int a = 10; // in binary: 1010
        int b = 12; // in binary: 1100

        // Perform bitwise XOR
        int result = a ^ b;

        // Print the result
        System.out.println("a ^ b = " + result); // Outputs 6, which is 0110 in binary
    }
}

- Detailed Breakdown

Let's break down the example:

- `a = 10` which is `1010` in binary.
- `b = 12` which is `1100` in binary.
- Performing `a ^ b` (bitwise XOR):

  1010
^ 1100
------
  0110

- The result is `6`, which is `0110` in binary.

- Swapping Two Numbers Using XOR

One of the classic uses of the XOR operator is swapping two numbers without using a temporary variable:

public class XORSwapExample {
    public static void main(String[] args) {
        int x = 5; // in binary: 0101
        int y = 9; // in binary: 1001

        // Display original values
        System.out.println("Before swapping: x = " + x + ", y = " + y);

        // Swap using XOR
        x = x ^ y;
        y = x ^ y;
        x = x ^ y;

        // Display swapped values
        System.out.println("After swapping: x = " + x + ", y = " + y);
    }
}

- Practical Applications

1. Toggle Bits: XOR can be used to toggle specific bits in a number.
2. Checksum Calculation: XOR is used in algorithms to compute checksums for error detection.
3. Encryption/Decryption: XOR is used in simple encryption algorithms where the same key is used to encrypt and decrypt data.

- Conclusion

The bitwise XOR operator in Java is a powerful tool for bit-level manipulation, enabling efficient and concise operations that are fundamental in many areas of programming and computer science.
