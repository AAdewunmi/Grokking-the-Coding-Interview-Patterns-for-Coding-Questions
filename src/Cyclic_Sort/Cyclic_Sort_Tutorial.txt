Cyclic Sort:
============

- Introduction:
===============

    The cyclic sort pattern is a useful algorithmic approach to solve problems involving arrays where elements are within
    a known range (e.g., 1 to n). This pattern is particularly effective for sorting such arrays in place and for finding
    missing or duplicate elements in these arrays. Let's delve into the details, implementation, and examples of the cyclic
    sort pattern for coding interviews.

- Key Concepts of Cyclic Sort Pattern:
======================================

    - Array Elements in Known Range: Cyclic sort works best with arrays where elements are within a known range, such as
        1 to n or 0 to n-1.
    - Correct Index Placement: Each element should be placed at the index equal to its value minus one (i.e., number 1
        at index 0, number 2 at index 1, etc.).
    - In-Place Sorting: The algorithm sorts the array in place, minimizing the space complexity.

- Steps to Implement Cyclic Sort:
=================================

    - Initialize Index: Start with the first element.
    - Correct Position Check: Check if the current element is in its correct position.
    - Swap If Necessary: If the current element is not in the correct position, swap it with the element at its target position.
    - Iterate: Move to the next element and repeat the process until all elements are in their correct positions.

- Problems Solvable with Cyclic Sort:
=====================================

    - Sort the Array: Given an array containing numbers from 1 to n, sort it using cyclic sort.
    - Find the Missing Number: Given an array containing numbers from 0 to n with one number missing, find the missing number.
    - Find All Missing Numbers: Given an array containing numbers from 1 to n with some numbers missing, find all missing numbers.
    - Find Duplicate Numbers: Given an array containing numbers from 1 to n with some duplicates, find all duplicates.

- Example Implementation:
==========================

    * Finding All Missing Numbers

    Here's an implementation for finding all missing numbers from an array containing numbers from 1 to n:

    import java.util.ArrayList;
    import java.util.List;

    public class AllMissingNumbers {
        public static List<Integer> findDisappearedNumbers(int[] nums) {
            int i = 0;
            while (i < nums.length) {
                int correctIndex = nums[i] - 1;
                if (nums[i] != nums[correctIndex]) {
                    swap(nums, i, correctIndex);
                } else {
                    i++;
                }
            }

            List<Integer> missingNumbers = new ArrayList<>();
            for (i = 0; i < nums.length; i++) {
                if (nums[i] != i + 1) {
                    missingNumbers.add(i + 1);
                }
            }

            return missingNumbers;
        }

        private static void swap(int[] nums, int i, int j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }

        public static void main(String[] args) {
            int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};
            List<Integer> missingNumbers = findDisappearedNumbers(nums);
            System.out.println("Missing numbers: " + missingNumbers);  // Output: Missing numbers: [5, 6]
        }
    }

- Cyclic Sort Example LeetCode Question:
========================================

    To solve the problem of finding all the integers that appear twice in an array, we need an approach that meets the
    constraints of O(n) time complexity and constant extra space (ChatGPT coded the solution ðŸ¤–).

    * Key Insight:
    Since the numbers are all in the range [1, n] and each integer appears once or twice, we can use the array itself
    to track which numbers have been seen by marking positions corresponding to the values we encounter.

    * Approach:
    1. Iterate through the array:
       - For each number in the array, treat the absolute value of the number as an index and negate the value at that index.
       - If we encounter a number and the position corresponding to its absolute value is already negative, it means the
       number has appeared before (i.e., it's a duplicate).
    2. Collect duplicates:
       - Maintain a list to store the numbers that we identify as duplicates.

    This approach uses the array itself to keep track of seen numbers by negating the values, thus avoiding the need for
        extra space beyond the output list.

    * Java Implementation:
    Here is how you can implement this in Java:

    import java.util.ArrayList;
    import java.util.List;

    public class FindDuplicates {
        public List<Integer> findDuplicates(int[] nums) {
            List<Integer> duplicates = new ArrayList<>();

            for (int i = 0; i < nums.length; i++) {
                int index = Math.abs(nums[i]) - 1;  // Find the index corresponding to the value
                if (nums[index] < 0) {
                    // If the value at this index is already negative, this is a duplicate
                    duplicates.add(Math.abs(nums[i]));
                } else {
                    // Negate the value at this index to mark it as seen
                    nums[index] = -nums[index];
                }
            }

            return duplicates;
        }

        public static void main(String[] args) {
            FindDuplicates solution = new FindDuplicates();
            int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};
            System.out.println(solution.findDuplicates(nums));  // Output: [2, 3]
        }
    }

    * Explanation:
    - Marking:
      - For each number, use its absolute value to find the index in the array.
      - If the number at the calculated index is negative, it means the number has already been encountered.
      - If not, negate the number at that index to mark it as seen.
    - Collecting duplicates:
      - Add numbers to the `duplicates` list when we find a negative value at the calculated index.

    *Space and Time Complexity:
    - Time Complexity:
      - The algorithm runs in O(n) time because we process each element of the array exactly once.
    - Space Complexity:
      - The space complexity is O(1) excluding the space for the output list. We use no extra space other than a
      few variables and the result list.

    This solution effectively finds all the integers that appear twice in the array, meeting the required constraints of
    O(n) time and constant extra space.